name: Kotlin CI

on:
  push:
    branches:
      - main
    paths-ignore:
      - '**.md'
  pull_request:
    types: [opened, synchronize, reopened]

env:
  GRADLE_HOME: ${{ github.workspace }}/gradle-home

jobs:

  assemble:
    name: Assemble
    runs-on: ubuntu-latest
    timeout-minutes: 35
    steps:
      # These setup steps should be common across all jobs in this workflow.
      - uses: actions/checkout@v2
      - uses: gradle/wrapper-validation-action@v1
      - name: set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8

      - name: Cache SonarCloud packages
        uses: actions/cache@v1
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      ## Caching
      - name: Cache gradle dependencies
        uses: actions/cache@v2.1.6
        with:
          path: ${{ env.GRADLE_HOME }}/caches
          # Include the SHA in the hash so this step always adds a cache entry. If we didn't use the SHA, the artifacts
          # would only get cached once for each build config hash.
          # Don't use ${{ runner.os }} in the key so we don't re-assemble for UI tests.
          key: gradle-${{ hashFiles('**/gradle/wrapper/gradle-wrapper.properties') }}-${{ hashFiles('**/*.gradle*') }}-${{ hashFiles('**/buildSrc/**') }}-${{ github.sha }}
          # The first time a SHA is assembled, we still want to load dependencies from the cache.
          # Note that none of jobs dependent on this one need restore keys, since they'll always have an exact hit.
          restore-keys: |
            gradle-${{ hashFiles('**/gradle/wrapper/gradle-wrapper.properties') }}-${{ hashFiles('**/*.gradle*') }}-${{ hashFiles('**/buildSrc/**') }}-
      # We want to keep the dependencies from the cache, but clear out the build cache which contains the actual
      # compiled artifacts from this project. This ensures we don't run into any issues with stale cache entries,
      # and that the resulting cache we upload for the other jobs won't waste any space on stale binaries.
      # A simpler approach would be simply to delete the build-cache before uploading the cache archive, however
      # if we did that in this job it would defeat the purpose of sharing that directory with dependent jobs,
      # and there's no way to modify the cache after the job that created it finishes.
      - name: Clean gradle build cache to assemble fresh
        run: |
          ls -lhrt $GRADLE_HOME/caches || true
          rm -rf $GRADLE_HOME/caches/build-cache-1
          ls -lhrt $GRADLE_HOME/caches || true
      ## Actual task
      - name: Assemble with gradle
        run: ./gradlew assemble --build-cache --no-daemon --stacktrace --gradle-user-home "$GRADLE_HOME"

  check:
    name: Check & Test
    needs: assemble
    runs-on: ubuntu-latest
    timeout-minutes: 35
    env:
      JAVA_TOOL_OPTIONS: -Xmx5120m
      GRADLE_OPTS: -Dorg.gradle.daemon=false -Dorg.gradle.workers.max=2 -Dkotlin.incremental=false -Dkotlin.compiler.execution.strategy=in-process
      TERM: dumb
    steps:
      - uses: actions/checkout@v2

      - name: set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8

      - name: Make checksum.sh executable
        run: chmod +x checksum.sh

      - name: Generate cache key
        run: ./checksum.sh checksum.txt

      - uses: actions/cache@v2.1.6
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('checksum.txt') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Run all checks
        run: ./gradlew detekt ktlintCheck test --build-cache --no-daemon --stacktrace --gradle-user-home "$GRADLE_HOME"
      - name: Jacoco test report
        run: ./gradlew jacocoTestReport
      #      - name: Upload coverage to Codecov
      #        uses: codecov/codecov-action@v1
      #        with:
      #          token: ${{ secrets.CODECOV_TOKEN }}
      - name: Upload test results
        if: ${{ always() }}
        uses: actions/upload-artifact@v2
        with:
          name: test-results
          path: "${{ github.workspace }}/**/build/reports/tests"
      - name: Upload jacoco report
        uses: actions/upload-artifact@v2
        with:
          name: jacoco-report
          path: "${{ github.workspace }}/**/build/reports/jacoco"
      - name: Analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: ./gradlew sonarqube --info
